#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct agenda {
  char nome[40];
  char tel[15];
  char cel[15];
  char email[40];
  int cod;
  struct agenda *prox;
} Agenda;

Agenda *inicializar() {
  return NULL;
}

void inserirContato(Agenda **lista, char nome[40], char tel[15], char cel[15], char email[40], int cod) {
  Agenda *novo = malloc(sizeof(Agenda));
  novo->cod = cod;
  strcpy(novo->nome, nome);
  strcpy(novo->tel, tel);
  strcpy(novo->cel, cel);
  strcpy(novo->email, email);
  if (lista == NULL){
    *lista = novo;
    (*lista)->prox = NULL;
  } else{
    novo->prox = *lista;
    *lista = novo;
  }
}

void listarContatos(Agenda *lista) {
  printf("-------------------");
  while(lista != NULL) {
    printf("\nNome: %s\n", lista->nome);
    printf("Telefone: %s\n", lista->tel);
    printf("Celular: %s\n", lista->cel);
    printf("E-mail: %s\n", lista->email);
    printf("senha: %d\n",lista->cod);
    printf("\n");
    lista = lista->prox;
  }
}

Agenda* buscarContato(Agenda *lista, int codigo) {
  Agenda *pont = lista;
  int achou = 0;
  while (pont != NULL && achou == 0) {
    if (pont->cod == codigo) {
      achou = 1;
    } else {
      pont = pont->prox;
    }
  }
  return pont;
}

void exibirContato(Agenda *lista) {
  if (lista != NULL) {
    printf("Informações do Contato de código %d \n", lista->cod);
    printf("Nome: %s \n", lista->nome);
    printf("Telefone: %s \n", lista->tel);
    printf("Celular: %s \n", lista->cel);
    printf("E-mail: %s \n", lista->email);
    printf("\n");
  } else {
    printf("Contato não encontrado! \n\n");
  }
}

Agenda *excluirContato(Agenda **lista,int cod) {
  Agenda *inicio = *lista;
  Agenda *anterior = NULL;
  while (inicio!=NULL && inicio->cod != cod) {
    anterior = inicio;
    inicio = (Agenda *)inicio->prox;
  }
  if (inicio==NULL) {
    return *lista;
  }
  if (anterior == NULL) {
    *lista = inicio->prox;
  } else{
    anterior->prox = (Agenda *) inicio->prox;
  }
  free(inicio);
  return *lista;
}

void liberarAgenda (Agenda **lista) {
  Agenda *p = *lista;
  Agenda *aux;
  while (p!=NULL) {
    aux = (Agenda *) p->prox;
    free(p);
    p=aux;
  }
}

int gerarMenu(int operacao) {
  printf("----------> Lista de Contatos<-------- \n");
  printf("*-*-*-*-*-*-*-*-*-*-*-*-*-*\n");
  printf("1 – Inserir Contato\n");
  printf("2 – Listar Contatos\n");
  printf("3 – Buscar Contato\n");
  printf("4 - Excluir um Contato\n");
  printf("5 - Excluir Agenda\n");
  printf("6 – Sair\n");
  printf("*-*-*-*-*-*-*-*-*-*-*-*-*-*\n");
  printf("Digite a operação que você deseja realizar: ");
  scanf("%d", &operacao);
  return operacao;
}

void gravarLista(Agenda *lista) {
    FILE *fp;
    
    fp = fopen("contatos.dat","wb");
    if (fp == NULL) {
   	 printf("Erro na abertura do arquivo... \n");
   	 exit(1);
    } else {
   	 while (lista != NULL) {
   		 fwrite(lista, sizeof(Agenda), 1, fp);
   		 lista = lista->prox;
   	 }
   	 printf("Arquivo gravado com sucesso! \n");
   	 fclose(fp);
    }
}

int main() {
  Agenda *lista = inicializar();
  Agenda *contato;
  int operacao;
  char nome[45], telefone[15], celular[15], email[40];
  int senha;
  operacao = 0;
  while (operacao != 6) {
    operacao = gerarMenu(operacao);
    switch(operacao) {
      case 1:
        printf("Nome: ");
        scanf("%s", nome);
        
        printf("\nTelefone: ");
        scanf("%s", telefone);
        
        printf("\nCelular: ");
        scanf("%s", celular);
        
        printf("\nE-mail: ");
        scanf("%s", email);

        printf("\nsenha: ");
        scanf("%d", &senha);
        
        inserirContato(&lista, nome, telefone, celular, email, senha);
        setbuf(stdin, NULL);
        break;
      case 2:
        listarContatos(lista);
        break;
      case 3:
        printf("Digite o código do contato: ");
        scanf("%d", &senha);
        contato = buscarContato(lista, senha);
        exibirContato(contato);
        break;
      case 4:
        printf("Digite a senha do contato para excluir: ");
        scanf("%d", &senha);
        excluirContato(&lista, senha);
        printf("Contato excluído com sucesso!\n");
        break;
      case 5:
        liberarAgenda(&lista);
        printf("Agenda limpada com sucesso!\n");
        break;
      case 6:
        gravarLista(lista);
        printf("Obrigado e volte sempre!\n");
        break;
    }
  }
  return 0;
}